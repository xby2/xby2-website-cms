<?php


if (class_exists("\x58\115\x4c\123\145\143\x75\x72\x69\x74\171\113\145\x79")) {
    goto LM;
}
include "\x78\155\x6c\x73\x65\143\154\x69\142\163\56\160\x68\160";
LM:
class SAMLSPUtilities
{
    public static function generateID()
    {
        return "\x5f" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($uw)
    {
        $dT = '';
        $r7 = 0;
        ky:
        if (!($r7 < strlen($uw))) {
            goto RF;
        }
        $dT .= sprintf("\x25\x30\62\x78", ord($uw[$r7]));
        JB:
        $r7++;
        goto ky;
        RF:
        return $dT;
    }
    public static function generateRandomBytes($rW, $cX = TRUE)
    {
        return openssl_random_pseudo_bytes($rW);
    }
    public static function createAuthnRequest($th, $TX, $C_, $bW = "\x66\141\154\x73\x65", $N8 = "\x48\164\x74\160\122\145\x64\x69\x72\145\x63\164")
    {
        $bJ = "\x3c\77\x78\155\x6c\40\166\145\x72\x73\x69\157\x6e\x3d\x22\x31\56\60\42\40\145\x6e\143\157\x64\x69\156\147\75\42\x55\124\106\55\70\x22\x3f\x3e" . "\x3c\x73\141\x6d\x6c\160\x3a\x41\165\x74\150\x6e\122\145\161\x75\x65\163\x74\x20\170\155\x6c\156\x73\x3a\163\141\x6d\154\x70\75\42\x75\x72\x6e\x3a\157\x61\x73\x69\x73\72\156\x61\155\145\163\x3a\164\143\72\123\101\x4d\114\x3a\x32\56\x30\x3a\160\162\x6f\x74\x6f\x63\157\154\42\x20\x78\x6d\154\156\x73\x3d\42\165\162\156\72\157\x61\163\151\x73\x3a\x6e\141\155\x65\x73\72\164\143\x3a\x53\101\115\x4c\72\62\x2e\60\72\x61\163\163\145\x72\164\151\157\156\42\40\111\104\75\42" . self::generateID() . "\42\40\x56\x65\x72\163\x69\157\x6e\x3d\42\x32\56\x30\42\40\111\163\163\165\x65\x49\x6e\x73\x74\141\x6e\164\75\x22" . self::generateTimestamp() . "\42";
        if (!($bW == "\x74\x72\x75\145")) {
            goto eX;
        }
        $bJ .= "\40\x46\157\162\143\145\101\x75\164\x68\156\x3d\42\164\x72\x75\145\x22";
        eX:
        $bJ .= "\40\120\162\x6f\164\157\143\157\x6c\102\151\156\x64\x69\x6e\147\75\42\165\162\x6e\72\x6f\141\x73\151\x73\x3a\156\x61\x6d\x65\x73\x3a\164\143\x3a\123\101\x4d\x4c\x3a\x32\x2e\60\x3a\142\x69\x6e\x64\151\156\147\163\x3a\110\x54\x54\120\x2d\120\117\x53\x54\42\x20\x41\163\163\145\x72\x74\151\x6f\x6e\x43\x6f\156\163\165\155\145\x72\x53\145\162\x76\x69\143\145\x55\122\x4c\x3d\x22" . $th . "\42\40\104\x65\x73\164\151\156\x61\164\x69\x6f\x6e\x3d\42" . $C_ . "\x22\x3e\x3c\163\x61\x6d\x6c\72\111\x73\x73\165\x65\162\40\x78\x6d\x6c\x6e\163\72\x73\141\155\154\75\x22\165\162\156\x3a\157\x61\x73\151\x73\x3a\156\141\x6d\x65\x73\72\x74\x63\x3a\123\101\x4d\x4c\72\62\56\60\72\141\163\x73\145\x72\164\x69\x6f\x6e\42\76" . $TX . "\x3c\x2f\163\141\x6d\154\x3a\x49\x73\x73\165\x65\162\76\x3c\163\x61\x6d\154\x70\72\x4e\x61\155\145\x49\x44\120\157\154\151\x63\x79\x20\x41\154\154\157\167\x43\162\145\141\164\145\75\x22\164\162\x75\x65\42\x20\106\x6f\x72\155\x61\x74\x3d\x22\165\x72\x6e\x3a\x6f\x61\x73\151\163\x3a\156\141\155\145\163\72\x74\143\x3a\123\101\115\114\72\61\56\x31\72\x6e\141\x6d\145\x69\144\x2d\x66\x6f\x72\x6d\141\164\x3a\165\156\x73\160\x65\143\151\146\151\145\x64\x22\12\40\x20\40\40\40\40\x20\40\x20\x20\40\x20\40\x20\x20\40\x20\40\x20\40\40\40\x20\x20\57\x3e\74\57\x73\141\155\x6c\160\72\101\165\164\150\x6e\x52\x65\x71\165\x65\x73\164\x3e";
        if (!(empty($N8) || $N8 == "\110\164\164\x70\x52\145\144\x69\x72\x65\x63\164")) {
            goto cS;
        }
        $ah = gzdeflate($bJ);
        $Y6 = base64_encode($ah);
        $AX = urlencode($Y6);
        $bJ = $AX;
        cS:
        return $bJ;
    }
    public static function createLogoutRequest($am, $OF = '', $TX, $C_, $KX = "\x48\x74\x74\160\x52\145\144\x69\162\x65\143\164")
    {
        $bJ = "\74\77\x78\155\x6c\40\x76\145\x72\x73\x69\157\x6e\75\x22\61\x2e\x30\42\x20\x65\156\143\157\x64\151\156\147\x3d\x22\125\x54\106\x2d\70\x22\x3f\76" . "\74\x73\x61\155\x6c\160\x3a\x4c\x6f\x67\157\x75\164\122\x65\x71\x75\145\163\x74\40\170\155\154\156\163\x3a\163\x61\155\154\x70\x3d\42\x75\x72\156\x3a\157\x61\163\x69\x73\x3a\156\141\155\x65\163\72\x74\143\x3a\x53\x41\115\114\72\62\56\60\72\160\x72\x6f\164\x6f\143\x6f\x6c\42\x20\x78\155\154\156\x73\x3a\x73\x61\x6d\154\x3d\42\x75\x72\156\72\157\141\163\x69\163\72\x6e\141\x6d\x65\163\72\164\143\72\x53\x41\x4d\114\x3a\x32\56\60\72\x61\163\163\x65\x72\164\151\x6f\156\42\40\111\104\75\42" . self::generateID() . "\x22\40\111\163\163\x75\x65\x49\156\x73\x74\141\x6e\x74\x3d\42" . self::generateTimestamp() . "\42\x20\126\x65\162\x73\x69\157\x6e\75\x22\62\x2e\x30\x22\x20\x44\145\163\164\x69\156\x61\x74\x69\x6f\156\x3d\x22" . $C_ . "\42\x3e\12\x9\x9\x9\11\11\x9\x3c\x73\x61\155\x6c\72\x49\163\163\165\145\x72\x20\170\x6d\x6c\156\163\x3a\x73\141\x6d\x6c\x3d\42\x75\x72\x6e\72\x6f\141\x73\151\x73\x3a\156\141\155\x65\x73\72\x74\x63\x3a\x53\101\115\x4c\x3a\62\56\60\72\141\163\163\x65\x72\x74\151\x6f\156\42\x3e" . $TX . "\74\57\x73\141\155\x6c\72\x49\x73\x73\x75\145\x72\76\xa\11\x9\11\x9\x9\x9\x3c\163\141\x6d\x6c\72\116\141\155\x65\x49\x44\x20\170\155\154\156\x73\x3a\163\x61\155\154\75\42\165\x72\x6e\72\157\141\163\x69\163\72\156\141\x6d\145\163\x3a\164\143\72\x53\x41\115\x4c\x3a\x32\x2e\x30\x3a\141\x73\x73\x65\162\164\x69\x6f\156\42\x3e" . $am[0] . "\74\x2f\163\141\155\x6c\x3a\x4e\141\155\145\111\x44\x3e";
        if (empty($OF)) {
            goto di;
        }
        $bJ .= "\74\163\141\155\x6c\160\72\123\145\x73\x73\151\x6f\x6e\111\156\x64\145\170\x3e" . $OF[0] . "\x3c\x2f\163\141\x6d\x6c\x70\72\x53\145\163\163\151\157\x6e\x49\156\x64\145\170\x3e";
        di:
        $bJ .= "\74\x2f\163\141\x6d\x6c\x70\72\114\x6f\x67\x6f\165\x74\122\145\161\x75\x65\163\164\76";
        if (!(empty($KX) || $KX == "\x48\x74\164\x70\122\x65\x64\x69\x72\145\143\x74")) {
            goto BC;
        }
        $ah = gzdeflate($bJ);
        $Y6 = base64_encode($ah);
        $AX = urlencode($Y6);
        $bJ = $AX;
        BC:
        return $bJ;
    }
    public static function createLogoutResponse($y9, $TX, $C_, $KX = "\x48\x74\164\160\122\x65\x64\x69\x72\145\x63\164")
    {
        $bJ = "\74\77\x78\x6d\x6c\x20\x76\x65\162\163\x69\157\x6e\75\42\61\x2e\x30\42\40\x65\x6e\143\157\144\x69\156\x67\75\x22\x55\x54\106\x2d\x38\42\77\x3e" . "\74\x73\141\155\154\160\72\114\157\147\x6f\x75\164\122\145\163\x70\157\x6e\x73\145\40\x78\155\154\156\163\72\x73\141\155\x6c\x70\75\x22\x75\x72\156\72\157\141\x73\151\x73\72\x6e\141\x6d\x65\x73\x3a\x74\143\x3a\123\101\115\x4c\x3a\x32\x2e\60\x3a\x70\162\157\164\x6f\x63\x6f\x6c\x22\x20\170\x6d\154\156\x73\72\x73\141\155\x6c\75\42\165\162\x6e\72\x6f\141\163\151\x73\x3a\x6e\141\155\x65\x73\72\x74\x63\x3a\x53\x41\x4d\x4c\72\62\x2e\60\x3a\x61\x73\163\145\162\164\151\157\x6e\x22\40" . "\x49\104\x3d\x22" . self::generateID() . "\x22\x20" . "\x56\145\162\163\x69\157\x6e\x3d\x22\62\x2e\60\42\x20\x49\x73\x73\x75\145\x49\156\x73\164\x61\156\x74\75\x22" . self::generateTimestamp() . "\x22\x20" . "\x44\x65\163\164\151\x6e\x61\x74\151\157\x6e\75\42" . $C_ . "\42\40" . "\x49\x6e\122\145\163\x70\x6f\156\163\x65\124\157\x3d\x22" . $y9 . "\42\76" . "\x3c\x73\141\155\154\x3a\x49\x73\x73\165\x65\x72\x20\170\155\154\x6e\163\72\x73\x61\155\154\75\42\x75\162\x6e\x3a\x6f\x61\163\x69\x73\x3a\x6e\141\x6d\x65\x73\x3a\164\143\72\x53\x41\115\x4c\x3a\x32\x2e\x30\72\141\163\x73\x65\x72\x74\151\157\156\x22\x3e" . $TX . "\74\57\163\141\155\x6c\x3a\x49\x73\163\165\x65\162\76" . "\74\x73\x61\x6d\154\160\72\x53\164\x61\164\165\163\76\74\x73\x61\155\x6c\x70\x3a\x53\164\141\x74\165\163\x43\x6f\144\x65\40\126\x61\154\x75\145\75\x22\x75\162\x6e\72\157\x61\163\151\163\x3a\x6e\141\155\145\163\x3a\x74\x63\x3a\123\x41\115\x4c\x3a\x32\x2e\x30\x3a\x73\164\141\164\x75\x73\72\x53\x75\x63\143\145\x73\x73\x22\x2f\x3e\74\57\163\141\x6d\x6c\x70\x3a\123\164\141\164\165\163\x3e\x3c\57\163\x61\155\154\160\72\114\x6f\147\x6f\165\164\122\145\163\160\157\156\x73\x65\76";
        if (!(empty($KX) || $KX == "\110\x74\164\x70\x52\145\x64\151\162\x65\x63\x74")) {
            goto cN;
        }
        $ah = gzdeflate($bJ);
        $Y6 = base64_encode($ah);
        $AX = urlencode($Y6);
        $bJ = $AX;
        cN:
        return $bJ;
    }
    public static function generateTimestamp($gd = NULL)
    {
        if (!($gd === NULL)) {
            goto FR;
        }
        $gd = time();
        FR:
        return gmdate("\x59\55\155\x2d\x64\x5c\124\x48\x3a\151\x3a\x73\134\x5a", $gd);
    }
    public static function xpQuery(DOMNode $Wl, $h6)
    {
        static $FI = NULL;
        if ($Wl instanceof DOMDocument) {
            goto aq;
        }
        $mZ = $Wl->ownerDocument;
        goto wS;
        aq:
        $mZ = $Wl;
        wS:
        if (!($FI === NULL || !$FI->document->isSameNode($mZ))) {
            goto x7;
        }
        $FI = new DOMXPath($mZ);
        $FI->registerNamespace("\x73\157\x61\x70\55\145\x6e\x76", "\x68\x74\164\x70\72\x2f\57\x73\143\150\x65\155\141\x73\x2e\170\x6d\154\x73\157\141\160\56\157\x72\147\x2f\163\157\x61\160\57\145\x6e\166\x65\154\x6f\x70\x65\x2f");
        $FI->registerNamespace("\x73\x61\x6d\x6c\137\160\x72\157\164\157\143\157\154", "\165\x72\156\72\157\141\163\151\163\72\156\x61\155\145\163\x3a\x74\143\72\123\101\x4d\114\72\62\56\x30\72\160\162\157\164\157\143\157\x6c");
        $FI->registerNamespace("\163\141\155\154\137\141\x73\x73\145\162\164\151\157\156", "\x75\x72\156\x3a\x6f\141\x73\x69\163\x3a\156\x61\x6d\x65\x73\x3a\164\143\72\x53\101\115\x4c\72\x32\56\60\72\141\x73\x73\145\x72\x74\x69\x6f\x6e");
        $FI->registerNamespace("\x73\141\155\154\x5f\155\145\164\x61\x64\141\x74\141", "\x75\x72\156\x3a\x6f\x61\163\x69\x73\x3a\156\x61\x6d\x65\x73\x3a\x74\x63\x3a\x53\101\115\114\72\x32\56\60\72\x6d\145\x74\x61\144\x61\x74\x61");
        $FI->registerNamespace("\144\x73", "\x68\164\x74\x70\x3a\x2f\x2f\167\x77\x77\x2e\x77\x33\x2e\x6f\162\147\x2f\x32\60\x30\x30\x2f\x30\71\57\170\155\x6c\x64\x73\151\x67\x23");
        $FI->registerNamespace("\x78\x65\156\x63", "\150\164\164\x70\x3a\x2f\x2f\x77\x77\x77\56\167\x33\56\157\x72\147\57\x32\60\60\x31\x2f\60\x34\x2f\170\x6d\154\x65\x6e\143\x23");
        x7:
        $EL = $FI->query($h6, $Wl);
        $dT = array();
        $r7 = 0;
        r5:
        if (!($r7 < $EL->length)) {
            goto tA;
        }
        $dT[$r7] = $EL->item($r7);
        BK:
        $r7++;
        goto r5;
        tA:
        return $dT;
    }
    public static function parseNameId(DOMElement $mD)
    {
        $dT = array("\x56\x61\x6c\165\145" => trim($mD->textContent));
        foreach (array("\x4e\x61\x6d\145\x51\x75\141\x6c\151\x66\x69\145\162", "\123\x50\x4e\141\155\145\x51\165\x61\x6c\151\x66\151\145\162", "\x46\x6f\x72\155\141\164") as $D7) {
            if (!$mD->hasAttribute($D7)) {
                goto r8;
            }
            $dT[$D7] = $mD->getAttribute($D7);
            r8:
            wU:
        }
        Y8:
        return $dT;
    }
    public static function xsDateTimeToTimestamp($PV)
    {
        $GZ = array();
        $vg = "\57\136\50\x5c\x64\x5c\144\x5c\144\134\x64\51\55\x28\134\x64\134\144\x29\x2d\x28\x5c\x64\x5c\x64\51\124\50\134\x64\134\144\51\x3a\50\134\x64\x5c\x64\51\72\x28\134\144\x5c\144\51\x28\x3f\72\x5c\56\134\x64\53\x29\x3f\132\44\x2f\x44";
        if (!(preg_match($vg, $PV, $GZ) == 0)) {
            goto Nh;
        }
        echo sprintf("\x6e\166\x61\154\x69\x64\x20\x53\101\x4d\x4c\62\40\x74\151\x6d\145\163\x74\x61\155\x70\40\160\x61\x73\163\145\x64\40\x74\157\40\170\x73\104\141\x74\x65\124\x69\x6d\x65\124\157\x54\151\x6d\x65\163\x74\141\x6d\160\x3a\40" . $PV);
        die;
        Nh:
        $Pm = intval($GZ[1]);
        $T5 = intval($GZ[2]);
        $ZM = intval($GZ[3]);
        $w6 = intval($GZ[4]);
        $K0 = intval($GZ[5]);
        $vr = intval($GZ[6]);
        $R2 = gmmktime($w6, $K0, $vr, $T5, $ZM, $Pm);
        return $R2;
    }
    public static function extractStrings(DOMElement $Ym, $vF, $IK)
    {
        $dT = array();
        $Wl = $Ym->firstChild;
        l4:
        if (!($Wl !== NULL)) {
            goto Gd;
        }
        if (!($Wl->namespaceURI !== $vF || $Wl->localName !== $IK)) {
            goto n4;
        }
        goto Bn;
        n4:
        $dT[] = trim($Wl->textContent);
        Bn:
        $Wl = $Wl->nextSibling;
        goto l4;
        Gd:
        return $dT;
    }
    public static function validateElement(DOMElement $W1)
    {
        $Cx = new XMLSecurityDSig();
        $Cx->idKeys[] = "\111\x44";
        $xw = self::xpQuery($W1, "\56\57\x64\x73\x3a\x53\x69\147\156\141\164\165\162\145");
        if (count($xw) === 0) {
            goto sC;
        }
        if (count($xw) > 1) {
            goto kA;
        }
        goto Ew;
        sC:
        return FALSE;
        goto Ew;
        kA:
        echo sprintf("\130\x4d\x4c\123\x65\143\72\x20\155\157\162\x65\x20\164\x68\x61\156\40\x6f\x6e\x65\40\x73\x69\147\156\141\164\165\162\145\40\145\154\145\155\x65\156\x74\40\x69\156\40\x72\157\x6f\164\x2e");
        die;
        Ew:
        $xw = $xw[0];
        $Cx->sigNode = $xw;
        $Cx->canonicalizeSignedInfo();
        if ($Cx->validateReference()) {
            goto A_;
        }
        echo sprintf("\x58\115\x4c\163\145\143\x3a\x20\x64\151\147\145\163\x74\x20\166\141\154\x69\144\x61\x74\x69\x6f\156\40\146\x61\x69\154\x65\x64");
        die;
        A_:
        $LV = FALSE;
        foreach ($Cx->getValidatedNodes() as $pu) {
            if ($pu->isSameNode($W1)) {
                goto hE;
            }
            if ($W1->parentNode instanceof DOMDocument && $pu->isSameNode($W1->ownerDocument)) {
                goto IC;
            }
            goto w0;
            hE:
            $LV = TRUE;
            goto PN;
            goto w0;
            IC:
            $LV = TRUE;
            goto PN;
            w0:
            O5:
        }
        PN:
        if ($LV) {
            goto TQ;
        }
        echo sprintf("\130\115\114\x53\145\143\72\x20\x54\x68\x65\x20\x72\x6f\x6f\x74\40\x65\154\x65\155\x65\156\164\40\151\x73\40\x6e\157\164\x20\x73\151\147\156\145\144\56");
        die;
        TQ:
        $FL = array();
        foreach (self::xpQuery($xw, "\x2e\x2f\x64\163\72\x4b\145\x79\111\x6e\146\x6f\x2f\144\163\x3a\x58\x35\x30\x39\x44\x61\164\x61\x2f\144\x73\72\130\65\x30\71\x43\x65\x72\164\151\146\x69\x63\x61\164\x65") as $Wn) {
            $cr = trim($Wn->textContent);
            $cr = str_replace(array("\15", "\xa", "\x9", "\x20"), '', $cr);
            $FL[] = $cr;
            qp:
        }
        bY:
        $dT = array("\123\151\147\x6e\141\x74\x75\x72\x65" => $Cx, "\103\x65\162\x74\x69\x66\151\143\x61\164\x65\x73" => $FL);
        return $dT;
    }
    public static function validateSignature(array $nU, XMLSecurityKey $Yy)
    {
        $Cx = $nU["\123\151\x67\156\141\164\x75\162\x65"];
        $zD = self::xpQuery($Cx->sigNode, "\56\57\144\163\x3a\x53\x69\147\156\x65\x64\111\x6e\x66\157\57\144\x73\72\x53\x69\x67\x6e\x61\164\165\162\x65\115\x65\164\150\157\x64");
        if (!empty($zD)) {
            goto zO;
        }
        echo sprintf("\x4d\x69\163\163\151\156\x67\40\x53\x69\x67\x6e\141\x74\165\x72\x65\x4d\145\x74\x68\157\144\40\145\154\x65\155\x65\156\164");
        die;
        zO:
        $zD = $zD[0];
        if ($zD->hasAttribute("\101\154\x67\157\162\151\164\150\x6d")) {
            goto Oi;
        }
        echo sprintf("\x4d\151\x73\x73\x69\156\x67\x20\x41\x6c\147\x6f\x72\x69\164\150\x6d\55\141\x74\x74\162\x69\142\x75\x74\145\x20\x6f\x6e\40\123\x69\x67\x6e\x61\x74\x75\x72\145\115\145\x74\150\x6f\x64\40\145\154\x65\155\145\x6e\164\56");
        die;
        Oi:
        $Sp = $zD->getAttribute("\x41\154\x67\157\x72\x69\164\x68\155");
        if (!($Yy->type === XMLSecurityKey::RSA_SHA1 && $Sp !== $Yy->type)) {
            goto el;
        }
        $Yy = self::castKey($Yy, $Sp);
        el:
        if ($Cx->verify($Yy)) {
            goto SA;
        }
        echo sprintf("\x55\x6e\141\x62\154\x65\x20\164\x6f\40\x76\x61\154\151\144\x61\x74\x65\x20\123\x69\x67\x6e\141\164\165\x72\145");
        die;
        SA:
    }
    public static function castKey(XMLSecurityKey $Yy, $o5, $J1 = "\x70\165\x62\x6c\151\x63")
    {
        if (!($Yy->type === $o5)) {
            goto xl;
        }
        return $Yy;
        xl:
        $QO = openssl_pkey_get_details($Yy->key);
        if (!($QO === FALSE)) {
            goto a0;
        }
        echo sprintf("\x55\x6e\x61\x62\154\x65\40\x74\x6f\40\147\145\164\40\153\x65\171\x20\144\145\x74\x61\x69\x6c\x73\x20\146\x72\157\x6d\40\x58\115\x4c\123\x65\x63\x75\x72\151\x74\171\113\x65\171\x2e");
        die;
        a0:
        if (isset($QO["\x6b\145\x79"])) {
            goto MC;
        }
        echo sprintf("\x4d\151\163\x73\x69\156\x67\x20\x6b\145\x79\x20\x69\x6e\40\x70\x75\142\x6c\x69\143\x20\153\145\x79\x20\x64\x65\x74\141\x69\x6c\x73\56");
        die;
        MC:
        $n2 = new XMLSecurityKey($o5, array("\x74\x79\x70\x65" => $J1));
        $n2->loadKey($QO["\x6b\x65\171"]);
        return $n2;
    }
    public static function processResponse($tU, $h5, $hr, SAML2SPResponse $JL, $bz, $zQ)
    {
        $Cu = current($JL->getAssertions());
        $GE = $Cu->getNotBefore();
        if (!($GE !== NULL && $GE > time() + 60)) {
            goto vn;
        }
        wp_die("\122\145\x63\x65\151\166\145\144\x20\141\156\x20\x61\163\x73\x65\162\x74\151\x6f\156\40\x74\150\x61\164\40\x69\163\40\166\141\154\x69\144\x20\x69\x6e\x20\x74\150\x65\x20\x66\165\x74\165\x72\145\x2e\x20\103\150\145\143\153\40\143\154\157\143\153\x20\163\171\x6e\x63\x68\x72\x6f\x6e\x69\x7a\141\164\x69\157\x6e\x20\157\156\x20\111\x64\x50\x20\x61\x6e\144\x20\x53\120\x2e");
        vn:
        $OU = $Cu->getNotOnOrAfter();
        if (!($OU !== NULL && $OU <= time() - 60)) {
            goto E8;
        }
        wp_die("\x52\x65\143\145\151\x76\x65\144\x20\x61\x6e\x20\x61\163\x73\145\x72\x74\151\x6f\156\x20\164\150\x61\164\40\x68\x61\163\x20\x65\x78\x70\151\x72\145\144\x2e\40\103\150\x65\x63\x6b\40\x63\154\x6f\143\153\40\163\x79\156\x63\x68\x72\157\x6e\151\x7a\141\164\151\157\x6e\40\x6f\x6e\40\111\x64\120\x20\x61\156\144\x20\x53\x50\x2e");
        E8:
        $l1 = $Cu->getSessionNotOnOrAfter();
        if (!($l1 !== NULL && $l1 <= time() - 60)) {
            goto OX;
        }
        wp_die("\x52\145\143\x65\x69\x76\145\x64\40\x61\x6e\x20\x61\163\x73\145\162\164\x69\x6f\156\40\167\151\x74\x68\40\x61\x20\163\x65\163\163\x69\x6f\156\x20\x74\x68\x61\164\40\x68\x61\x73\40\x65\170\x70\x69\x72\145\x64\x2e\40\103\x68\x65\x63\x6b\x20\143\154\x6f\x63\x6b\40\x73\171\156\x63\150\162\157\156\x69\x7a\141\x74\x69\157\156\x20\x6f\x6e\40\x49\144\x50\x20\141\x6e\144\x20\123\x50\56");
        OX:
        $QJ = $JL->getDestination();
        if (!(substr($QJ, -1) == "\57")) {
            goto QO;
        }
        $QJ = substr($QJ, 0, -1);
        QO:
        if (!(substr($tU, -1) == "\57")) {
            goto UR;
        }
        $tU = substr($tU, 0, -1);
        UR:
        if (!($QJ !== NULL && $QJ !== $tU)) {
            goto xn;
        }
        echo "\104\x65\163\x74\151\x6e\x61\164\151\157\156\x20\x69\156\40\162\x65\x73\x70\x6f\156\163\145\x20\144\x6f\145\163\156\x27\164\x20\x6d\141\164\143\x68\40\164\x68\x65\40\x63\x75\x72\162\x65\x6e\x74\40\125\x52\114\56\x20\x44\145\163\x74\x69\156\141\x74\x69\157\x6e\x20\151\x73\40\x22" . $QJ . "\x22\54\40\143\165\x72\x72\145\156\x74\40\125\122\x4c\x20\151\163\40\42" . $tU . "\x22\x2e";
        die;
        xn:
        $uA = self::checkSign($h5, $hr, $bz, $zQ);
        return $uA;
    }
    public static function checkSign($h5, $hr, $bz, $zQ)
    {
        $FL = $hr["\x43\x65\x72\x74\151\x66\x69\x63\x61\x74\x65\x73"];
        if (count($FL) === 0) {
            goto tv;
        }
        $rZ = array();
        $rZ[] = $h5;
        $vv = self::findCertificate($rZ, $FL, $zQ);
        if (!($vv == false)) {
            goto S2;
        }
        return false;
        S2:
        goto LU;
        tv:
        $Iw = maybe_unserialize(get_option("\x73\141\155\x6c\137\x78\x35\60\x39\x5f\143\145\162\x74\151\146\151\143\x61\x74\145"));
        $vv = $Iw[$bz];
        LU:
        $yT = NULL;
        $Yy = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\x74\x79\160\145" => "\x70\x75\142\154\151\143"));
        $Yy->loadKey($vv);
        try {
            self::validateSignature($hr, $Yy);
            return TRUE;
        } catch (Exception $sK) {
            $yT = $sK;
        }
        if ($yT !== NULL) {
            goto Vz;
        }
        return FALSE;
        goto rw;
        Vz:
        throw $yT;
        rw:
    }
    public static function validateIssuerAndAudience($X3, $SE, $nF, $zQ)
    {
        $TX = current($X3->getAssertions())->getIssuer();
        $Cu = current($X3->getAssertions());
        $Nk = $Cu->getValidAudiences();
        if (strcmp($nF, $TX) === 0) {
            goto m4;
        }
        if ($zQ == "\x74\145\x73\164\126\x61\154\151\x64\141\164\x65") {
            goto Jp;
        }
        wp_die("\127\145\40\x63\157\x75\154\x64\40\x6e\157\x74\40\x73\x69\x67\x6e\40\x79\x6f\x75\40\x69\156\56\x20\x50\x6c\x65\x61\x73\145\40\x63\157\x6e\164\141\x63\164\x20\x79\x6f\165\162\x20\x41\144\155\x69\x6e\x69\163\164\162\141\164\x6f\162", "\105\x72\162\157\x72\x20\72\x49\x73\x73\x75\145\x72\40\143\x61\156\x6e\157\164\x20\x62\145\40\x76\x65\x72\151\x66\x69\x65\x64");
        goto NQ;
        Jp:
        ob_end_clean();
        echo "\74\x64\x69\166\x20\163\x74\171\154\x65\x3d\x22\146\157\x6e\164\x2d\x66\141\155\151\x6c\x79\x3a\103\141\x6c\151\x62\162\x69\x3b\x70\141\144\x64\151\156\147\72\x30\x20\x33\45\x3b\x22\76";
        echo "\x3c\x64\x69\166\x20\163\164\x79\x6c\x65\x3d\x22\x63\x6f\x6c\157\162\x3a\x20\43\141\x39\64\64\64\62\73\142\141\x63\153\x67\x72\x6f\x75\x6e\x64\55\x63\157\x6c\157\162\x3a\40\x23\146\62\144\x65\x64\x65\73\x70\141\x64\x64\x69\156\x67\72\40\x31\65\160\x78\73\x6d\x61\162\147\x69\x6e\x2d\x62\x6f\164\x74\157\x6d\72\40\62\60\x70\170\73\x74\x65\170\164\x2d\x61\154\151\147\x6e\72\x63\145\x6e\164\145\x72\73\x62\x6f\162\144\145\162\x3a\x31\160\170\x20\x73\157\x6c\x69\x64\40\x23\x45\x36\x42\x33\x42\62\73\x66\157\x6e\164\55\x73\x69\172\145\72\x31\70\160\x74\73\x22\76\x20\105\x52\x52\x4f\x52\74\x2f\x64\x69\166\76\12\11\x9\x9\x20\x3c\144\151\x76\40\x73\x74\x79\x6c\x65\x3d\42\x63\157\x6c\x6f\x72\x3a\x20\x23\x61\71\64\x34\x34\62\73\x66\x6f\x6e\x74\x2d\163\x69\172\x65\72\x31\x34\160\164\x3b\40\x6d\x61\x72\x67\151\156\x2d\142\157\164\x74\157\155\x3a\62\60\x70\x78\x3b\42\x3e\x3c\x70\x3e\x3c\x73\164\x72\x6f\x6e\x67\76\105\162\162\x6f\x72\x3a\40\74\x2f\x73\x74\x72\x6f\156\147\76\111\163\163\x75\145\162\x20\143\141\x6e\x6e\157\164\40\142\x65\40\x76\x65\162\151\146\x69\x65\x64\56\74\x2f\x70\76\12\11\11\x9\40\x3c\160\76\120\154\x65\141\163\x65\x20\x63\157\x6e\x74\141\143\164\x20\x79\x6f\x75\x72\x20\141\x64\155\151\156\x69\x73\x74\162\141\x74\x6f\162\40\141\x6e\x64\x20\x72\x65\160\x6f\x72\164\40\164\x68\x65\40\146\x6f\x6c\x6c\157\x77\151\x6e\147\40\145\162\x72\157\x72\72\74\x2f\160\x3e\12\11\11\x9\40\74\160\76\74\x73\x74\162\157\x6e\147\76\120\x6f\x73\163\151\x62\x6c\x65\x20\103\141\x75\163\x65\x3a\x20\x3c\x2f\163\164\162\157\x6e\147\x3e\111\x64\120\x20\x45\x6e\x74\151\164\171\x20\111\x44\40\143\x6f\156\146\x69\147\165\x72\145\x64\x20\x69\156\40\x74\x68\145\x20\x70\154\165\x67\151\156\40\x69\163\40\x69\156\x63\157\x72\162\x65\143\x74\x3c\x2f\x70\x3e\xa\x9\11\x9\x20\74\160\x3e\74\163\164\162\157\156\147\x3e\105\156\x74\151\164\171\40\x49\x44\40\x69\156\40\123\x41\115\x4c\x20\x52\145\x73\160\157\x6e\163\145\x3a\x20\x3c\x2f\x73\164\x72\157\156\147\76" . $TX . "\74\160\x3e\xa\11\x9\x9\40\x3c\x70\x3e\74\163\x74\x72\157\156\x67\x3e\x45\x6e\164\x69\164\171\x20\111\x44\x20\143\x6f\156\x66\x69\147\x75\x72\x65\144\40\x69\x6e\40\x74\150\145\40\x70\x6c\165\147\x69\156\x3a\40\74\57\163\x74\162\x6f\156\147\x3e" . $nF . "\74\57\160\76\12\x9\x9\x9\x20\x3c\x2f\144\x69\x76\76\12\x9\x9\11\x20\74\x64\151\x76\40\163\164\171\154\145\75\x22\x6d\x61\x72\147\x69\156\72\63\x25\x3b\x64\151\x73\x70\154\x61\171\72\142\x6c\x6f\x63\x6b\73\164\145\170\164\x2d\x61\x6c\151\x67\156\x3a\143\145\x6e\164\x65\x72\73\42\x3e\xa\11\x9\x9\40\x3c\x64\x69\x76\x20\163\x74\x79\x6c\145\x3d\x22\155\x61\x72\x67\x69\x6e\72\63\45\73\144\151\163\160\x6c\x61\x79\x3a\x62\x6c\157\x63\153\73\x74\x65\170\x74\x2d\x61\154\x69\147\156\x3a\x63\145\x6e\x74\145\x72\73\42\x3e\x3c\x69\x6e\x70\165\164\x20\163\x74\x79\154\x65\x3d\x22\x70\141\144\144\151\x6e\147\x3a\61\45\73\167\151\x64\x74\x68\72\61\x30\x30\160\x78\73\x62\141\x63\153\147\162\x6f\x75\x6e\144\72\40\x23\60\60\71\61\103\x44\x20\x6e\157\156\145\x20\162\145\x70\x65\x61\x74\x20\x73\143\162\157\x6c\x6c\40\x30\45\40\60\45\x3b\143\x75\x72\x73\x6f\x72\72\40\x70\x6f\151\156\164\145\x72\73\146\157\156\164\55\x73\151\x7a\x65\72\61\x35\x70\x78\x3b\142\x6f\162\x64\145\x72\55\x77\151\x64\164\150\72\40\61\160\x78\x3b\x62\157\162\x64\145\x72\55\x73\x74\171\x6c\x65\72\40\163\x6f\154\x69\144\x3b\x62\x6f\x72\144\x65\162\x2d\x72\x61\144\151\165\163\72\40\63\x70\x78\73\167\x68\151\164\145\x2d\x73\x70\x61\143\x65\72\x20\x6e\x6f\x77\x72\x61\x70\73\142\x6f\170\x2d\x73\151\x7a\x69\x6e\147\72\x20\x62\157\162\144\145\x72\55\142\157\x78\x3b\x62\x6f\x72\x64\x65\162\55\143\x6f\x6c\x6f\x72\72\40\x23\60\60\67\63\x41\x41\x3b\142\157\x78\x2d\163\x68\141\144\157\167\72\40\60\160\x78\x20\x31\x70\170\x20\x30\x70\170\x20\x72\x67\x62\x61\50\x31\x32\60\54\40\62\60\60\x2c\x20\62\63\60\x2c\40\x30\56\x36\51\40\151\156\x73\x65\x74\x3b\x63\x6f\154\157\162\x3a\x20\x23\106\106\106\x3b\x22\164\171\x70\145\x3d\x22\x62\165\164\164\x6f\x6e\x22\40\166\141\x6c\165\145\x3d\x22\104\157\156\145\42\40\157\156\103\154\x69\143\153\x3d\42\163\145\x6c\x66\x2e\x63\154\157\163\x65\50\x29\73\42\x3e\x3c\57\144\x69\x76\76";
        die;
        NQ:
        goto vg;
        m4:
        if (empty($Nk)) {
            goto hR;
        }
        if (in_array($SE, $Nk, TRUE)) {
            goto kB;
        }
        if ($zQ == "\164\145\163\x74\x56\x61\154\x69\144\x61\164\x65") {
            goto Gm;
        }
        wp_die("\127\x65\x20\x63\157\165\x6c\144\x20\x6e\x6f\x74\x20\163\151\147\156\40\x79\x6f\x75\40\x69\x6e\x2e\40\120\154\x65\141\x73\145\40\143\157\x6e\x74\x61\x63\x74\x20\171\157\x75\x72\40\101\144\155\x69\x6e\x69\163\x74\162\x61\x74\x6f\162", "\x45\162\x72\x6f\162\40\x3a\x49\x6e\166\x61\x6c\x69\x64\40\101\165\x64\151\145\156\143\145\40\x55\122\x49");
        goto r7;
        Gm:
        ob_end_clean();
        echo "\74\144\x69\x76\40\163\164\171\x6c\145\x3d\x22\x66\157\156\x74\55\x66\141\x6d\x69\154\171\72\103\141\154\151\x62\x72\151\73\x70\x61\144\144\x69\x6e\147\x3a\x30\40\x33\x25\73\42\x3e";
        echo "\x3c\144\x69\x76\40\x73\x74\x79\154\145\75\x22\143\157\x6c\157\x72\72\40\43\x61\x39\64\x34\64\62\x3b\x62\141\143\153\147\162\157\x75\156\x64\x2d\143\157\x6c\157\x72\x3a\40\43\x66\x32\x64\145\x64\x65\73\x70\x61\144\x64\151\x6e\147\x3a\x20\61\x35\160\170\73\x6d\141\162\147\x69\156\55\142\157\x74\x74\x6f\x6d\x3a\x20\x32\60\160\170\73\164\x65\x78\164\55\141\154\x69\147\156\72\x63\145\x6e\164\x65\x72\x3b\x62\157\162\144\x65\x72\72\61\x70\170\40\x73\x6f\154\x69\144\x20\43\x45\x36\102\x33\102\62\73\x66\x6f\156\x74\55\x73\x69\172\145\x3a\61\70\x70\164\x3b\42\x3e\x20\105\x52\122\117\x52\x3c\x2f\x64\151\166\x3e\12\x20\x20\40\40\x20\40\x20\x20\x20\x20\40\40\x20\x20\x20\x20\40\40\40\x20\x3c\x64\151\166\40\163\x74\x79\154\145\x3d\x22\143\x6f\154\157\162\x3a\40\x23\141\71\64\x34\64\x32\x3b\146\x6f\156\x74\x2d\x73\151\x7a\145\72\x31\64\x70\x74\73\x20\155\141\x72\147\x69\156\x2d\x62\157\x74\164\157\155\72\62\x30\160\x78\73\42\76\74\160\x3e\74\x73\164\x72\x6f\156\x67\76\105\162\162\157\162\72\40\74\57\163\164\162\x6f\x6e\147\x3e\111\156\166\x61\x6c\151\144\x20\101\x75\x64\x69\145\x6e\143\145\40\125\x52\x49\56\x3c\x2f\x70\76\xa\x20\40\40\x20\x20\40\x20\40\40\40\40\40\40\40\40\40\40\40\x20\40\x3c\x70\x3e\120\x6c\145\141\163\x65\40\x63\x6f\x6e\164\141\143\x74\x20\x79\x6f\x75\162\40\141\144\x6d\151\x6e\x69\163\164\x72\141\164\157\162\x20\x61\156\144\x20\x72\x65\160\x6f\x72\164\40\x74\150\145\x20\x66\x6f\154\x6c\157\167\151\x6e\x67\x20\x65\162\x72\x6f\x72\72\74\x2f\x70\x3e\12\x20\40\x20\40\40\x20\40\40\40\40\40\40\40\40\x20\x20\x20\40\40\40\x3c\160\x3e\74\x73\x74\x72\157\x6e\147\76\120\157\163\163\x69\142\154\x65\40\x43\x61\165\x73\145\72\40\x3c\x2f\163\164\x72\x6f\156\x67\76\x54\x68\145\40\166\141\x6c\165\145\40\157\x66\40\x27\x41\165\144\151\145\x6e\143\x65\40\125\x52\111\x27\x20\x66\151\x65\x6c\x64\x20\x6f\156\40\x49\144\145\156\164\151\164\x79\40\120\x72\x6f\166\151\144\x65\162\47\163\x20\163\151\144\x65\x20\x69\x73\40\151\x6e\x63\157\x72\162\x65\x63\x74\x3c\x2f\160\x3e\xa\x20\x20\x20\x20\x20\40\40\40\40\40\x20\x20\x20\x20\40\40\40\x20\40\x20\x3c\x70\x3e\105\170\x70\145\x63\x74\145\x64\x20\157\x6e\145\x20\x6f\x66\40\164\x68\145\40\x41\165\144\x69\x65\x6e\x63\145\x73\40\164\x6f\x20\x62\x65\72\x20" . $SE . "\74\x70\x3e\xa\40\40\40\40\40\x20\x20\x20\40\x20\40\x20\40\40\x20\40\x20\40\40\x20\74\x2f\x64\x69\x76\x3e\12\40\x20\40\40\40\x20\40\40\x20\x20\x20\x20\40\40\40\x20\x20\x20\40\x20\x3c\144\151\166\x20\x73\x74\171\154\145\x3d\42\155\x61\x72\x67\x69\x6e\x3a\x33\x25\73\x64\x69\x73\160\x6c\x61\171\x3a\x62\x6c\157\x63\153\73\164\145\170\164\x2d\x61\154\151\x67\x6e\72\143\x65\x6e\x74\145\x72\x3b\x22\x3e\xa\40\x20\x20\x20\40\x20\x20\x20\x20\40\40\40\40\x20\x20\x20\40\40\x20\x20\74\x64\x69\x76\40\163\x74\171\x6c\x65\x3d\x22\155\141\x72\147\151\x6e\72\63\45\x3b\x64\x69\163\x70\154\141\171\72\x62\x6c\x6f\x63\153\x3b\164\x65\x78\164\x2d\141\154\151\x67\156\x3a\143\145\156\164\x65\x72\73\42\x3e\x3c\151\x6e\160\165\x74\x20\163\164\x79\x6c\x65\75\42\160\x61\144\x64\x69\x6e\147\x3a\61\45\x3b\167\x69\144\x74\150\x3a\x31\60\60\x70\170\73\x62\x61\143\153\x67\x72\157\x75\x6e\144\72\40\43\x30\60\71\x31\x43\104\40\156\157\x6e\x65\40\162\x65\x70\145\141\164\40\x73\143\x72\x6f\x6c\154\x20\60\45\40\x30\x25\x3b\x63\165\x72\x73\157\x72\x3a\40\160\157\151\156\x74\x65\x72\73\x66\x6f\x6e\x74\55\163\x69\x7a\145\x3a\x31\65\x70\170\73\x62\157\162\x64\145\162\55\x77\x69\x64\164\150\72\40\x31\x70\x78\73\142\157\162\x64\x65\162\x2d\x73\x74\x79\154\145\72\40\163\x6f\154\151\144\73\142\157\162\144\x65\162\55\162\x61\x64\151\x75\x73\x3a\40\x33\160\170\x3b\x77\x68\x69\x74\145\x2d\x73\160\x61\x63\x65\72\40\156\x6f\167\162\141\160\x3b\x62\x6f\170\x2d\163\x69\172\x69\x6e\147\72\x20\142\x6f\162\x64\145\162\x2d\x62\x6f\x78\x3b\x62\x6f\162\144\145\x72\55\143\157\x6c\x6f\x72\x3a\x20\x23\x30\60\x37\63\x41\x41\73\x62\157\170\55\x73\150\x61\x64\x6f\x77\x3a\x20\x30\160\x78\x20\x31\x70\x78\x20\60\x70\170\x20\162\x67\x62\x61\50\61\62\60\x2c\x20\x32\60\60\54\40\62\x33\60\54\x20\60\x2e\66\x29\x20\151\x6e\163\x65\x74\73\143\157\x6c\157\x72\72\x20\43\106\106\x46\73\x22\164\x79\x70\x65\75\x22\142\165\164\x74\157\x6e\x22\40\166\141\x6c\165\145\75\42\104\x6f\156\145\x22\40\157\x6e\x43\x6c\151\143\x6b\75\42\x73\145\154\x66\x2e\143\154\157\x73\145\x28\51\73\42\x3e\74\x2f\x64\x69\x76\76";
        die;
        r7:
        goto zI;
        kB:
        return TRUE;
        zI:
        hR:
        vg:
    }
    private static function findCertificate(array $eg, array $FL, $zQ)
    {
        $uO = array();
        foreach ($FL as $Qi) {
            $MO = strtolower(sha1(base64_decode($Qi)));
            if (in_array($MO, $eg, TRUE)) {
                goto uX;
            }
            $uO[] = $MO;
            return false;
            uX:
            $EM = "\x2d\x2d\x2d\x2d\x2d\102\x45\107\111\x4e\x20\103\105\x52\x54\111\x46\111\x43\101\x54\105\x2d\55\55\55\55\12" . chunk_split($Qi, 64) . "\x2d\x2d\55\55\x2d\105\x4e\x44\x20\x43\105\122\x54\111\x46\x49\103\101\x54\x45\55\55\x2d\55\55\xa";
            return $EM;
            Ig:
        }
        L3:
        if ($zQ == "\164\145\163\x74\x56\141\x6c\151\x64\141\x74\x65") {
            goto qS;
        }
        wp_die("\127\145\40\x63\157\165\x6c\144\x20\156\157\x74\x20\x73\x69\x67\x6e\40\x79\157\x75\x20\151\x6e\x2e\40\120\154\145\141\x73\x65\x20\x63\x6f\156\164\141\143\164\x20\x79\157\165\x72\x20\101\x64\x6d\151\x6e\151\163\164\162\x61\164\x6f\162", "\105\x72\x72\x6f\x72\40\x3a\103\x65\x72\x74\151\x66\x69\x63\x61\164\145\40\156\x6f\164\40\x66\157\x75\156\x64");
        goto nY;
        qS:
        $EM = "\55\x2d\55\x2d\55\x42\x45\107\x49\x4e\40\103\105\122\x54\x49\x46\x49\x43\x41\124\x45\x2d\55\x2d\55\x2d\74\x62\x72\76" . chunk_split($Qi, 64) . "\x3c\142\162\x3e\55\x2d\x2d\55\x2d\105\116\104\x20\103\x45\x52\124\111\106\x49\103\x41\124\x45\55\x2d\55\55\x2d";
        echo "\x3c\x64\151\x76\40\x73\x74\x79\x6c\145\75\42\x66\157\156\164\x2d\146\x61\x6d\x69\154\171\x3a\x43\141\154\x69\142\162\151\73\160\141\144\144\x69\x6e\x67\x3a\x30\40\63\45\x3b\42\x3e";
        echo "\x3c\x64\x69\166\x20\x73\164\171\154\x65\x3d\x22\143\x6f\154\157\162\72\40\43\141\71\x34\x34\64\62\x3b\x62\141\x63\153\x67\162\157\165\156\144\55\143\x6f\x6c\157\162\x3a\40\43\x66\62\x64\145\x64\145\73\x70\141\144\144\x69\156\x67\x3a\40\61\x35\x70\x78\73\x6d\141\162\x67\151\x6e\55\x62\x6f\164\x74\157\x6d\x3a\40\x32\60\160\170\x3b\x74\145\x78\x74\55\141\154\x69\x67\x6e\72\x63\x65\156\x74\145\x72\x3b\142\x6f\162\144\145\x72\x3a\61\160\x78\40\163\x6f\x6c\x69\x64\40\43\x45\x36\x42\x33\x42\x32\73\146\157\156\x74\x2d\x73\151\x7a\145\x3a\61\70\x70\x74\x3b\x22\x3e\x20\105\122\x52\117\x52\74\57\x64\x69\x76\x3e\xa\11\11\x9\74\144\x69\x76\x20\163\x74\x79\x6c\145\x3d\42\143\157\x6c\x6f\162\x3a\x20\x23\141\x39\64\x34\64\x32\x3b\146\x6f\x6e\164\55\x73\151\172\x65\x3a\61\x34\x70\164\73\x20\155\141\162\147\x69\x6e\55\142\157\164\x74\x6f\155\72\62\60\x70\x78\x3b\42\76\x3c\160\76\74\x73\164\162\x6f\x6e\147\x3e\x45\x72\162\157\162\x3a\x20\x3c\x2f\163\164\162\157\x6e\x67\76\x55\156\x61\142\x6c\x65\40\164\157\40\146\x69\x6e\144\x20\141\x20\143\x65\162\x74\x69\146\x69\143\x61\164\145\40\x6d\x61\164\x63\x68\151\x6e\x67\x20\x74\150\x65\x20\x63\x6f\156\146\151\x67\165\162\x65\144\40\x66\151\156\x67\145\162\x70\x72\x69\x6e\164\56\x3c\57\160\x3e\12\x9\11\x9\74\160\76\120\x6c\145\x61\163\x65\x20\143\157\x6e\164\x61\x63\164\40\171\x6f\165\x72\x20\x61\144\x6d\151\x6e\151\x73\164\x72\141\164\157\162\x20\x61\156\x64\40\x72\145\160\x6f\162\164\x20\164\x68\x65\40\x66\x6f\x6c\154\157\167\151\156\x67\40\x65\x72\x72\x6f\162\x3a\x3c\57\x70\x3e\12\11\x9\11\x3c\x70\76\x3c\163\x74\162\x6f\156\147\76\x50\157\x73\163\x69\142\x6c\145\40\x43\x61\165\163\145\72\40\x3c\57\163\x74\162\157\x6e\147\76\47\130\56\65\x30\71\40\103\x65\x72\164\x69\146\151\143\141\164\145\47\40\x66\151\x65\x6c\x64\x20\151\x6e\40\x70\154\x75\x67\x69\156\40\144\x6f\145\x73\40\156\157\164\40\x6d\141\x74\143\x68\x20\x74\150\145\40\143\145\x72\164\151\146\151\143\141\x74\145\40\x66\157\165\x6e\144\x20\151\156\40\123\101\115\114\40\122\x65\163\x70\157\x6e\x73\x65\56\x3c\x2f\x70\x3e\xa\11\11\11\x3c\x70\x3e\x3c\x73\x74\x72\157\x6e\x67\x3e\103\x65\x72\x74\x69\x66\x69\x63\x61\x74\x65\x20\x66\x6f\165\x6e\x64\40\151\156\x20\123\x41\x4d\x4c\40\x52\x65\x73\160\157\156\163\145\x3a\40\x3c\57\163\x74\x72\x6f\156\147\76\x3c\x62\162\x3e\74\x62\x72\76" . $EM . "\74\x2f\160\76\12\11\11\11\x9\x9\74\x2f\x64\x69\x76\76\12\11\11\x9\11\x9\74\144\151\x76\x20\x73\164\x79\154\145\75\x22\155\141\162\x67\x69\156\x3a\x33\45\73\144\151\163\x70\x6c\x61\x79\x3a\142\154\157\x63\153\73\x74\x65\170\x74\55\141\x6c\x69\x67\156\x3a\x63\x65\156\x74\x65\x72\73\x22\x3e\12\11\11\x9\11\x9\x3c\x66\157\162\x6d\40\x61\143\164\151\157\x6e\x3d\42\151\156\144\145\170\x2e\160\x68\x70\x22\76\12\x9\11\x9\x9\x9\x3c\x64\151\x76\40\163\164\171\154\145\x3d\x22\155\141\162\x67\x69\156\x3a\63\45\73\x64\151\x73\x70\154\x61\x79\x3a\142\x6c\157\x63\153\x3b\164\x65\170\164\x2d\x61\154\x69\147\156\x3a\143\x65\156\x74\145\162\73\42\76\x3c\151\156\x70\x75\164\x20\163\164\x79\154\145\x3d\x22\x70\141\144\144\x69\x6e\147\72\61\x25\x3b\167\151\x64\164\x68\72\61\60\x30\x70\x78\x3b\x62\141\x63\153\x67\x72\x6f\x75\156\x64\x3a\40\x23\x30\60\71\61\103\104\40\156\157\x6e\145\40\162\x65\x70\x65\141\164\x20\163\143\162\x6f\154\154\x20\60\x25\40\x30\x25\73\143\x75\162\x73\x6f\162\72\40\x70\157\151\156\x74\145\162\73\x66\x6f\x6e\164\55\163\x69\x7a\145\x3a\x31\x35\160\x78\73\142\x6f\x72\144\145\x72\55\x77\151\x64\164\x68\x3a\x20\61\160\170\x3b\x62\157\162\x64\145\162\55\x73\164\171\x6c\145\72\40\163\x6f\154\x69\144\73\x62\x6f\x72\144\145\x72\55\162\x61\x64\x69\165\x73\x3a\40\x33\160\x78\73\x77\x68\x69\164\x65\x2d\163\x70\141\143\145\72\x20\x6e\x6f\x77\x72\x61\x70\73\x62\x6f\170\55\163\151\172\151\156\147\72\40\x62\157\x72\144\145\162\x2d\x62\x6f\170\73\x62\157\x72\x64\x65\162\55\x63\x6f\x6c\157\162\72\x20\x23\60\60\x37\63\x41\101\x3b\142\157\x78\x2d\163\x68\x61\144\157\x77\72\40\60\x70\170\40\61\160\x78\x20\60\160\170\x20\162\147\x62\141\x28\61\x32\x30\x2c\40\x32\x30\60\x2c\40\x32\x33\60\x2c\40\60\x2e\66\x29\40\x69\x6e\x73\x65\x74\x3b\x63\x6f\154\157\162\72\x20\x23\x46\106\x46\x3b\x22\164\171\160\x65\75\42\x62\x75\164\x74\x6f\156\42\x20\166\x61\154\x75\145\x3d\x22\104\157\x6e\145\x22\x20\157\x6e\103\154\x69\x63\153\75\42\x73\145\x6c\x66\56\143\x6c\157\x73\145\x28\x29\x3b\x22\x3e\x3c\x2f\x64\x69\166\x3e";
        die;
        nY:
    }
    private static function doDecryptElement(DOMElement $U6, XMLSecurityKey $Bk, array &$NH)
    {
        $qh = new XMLSecEnc();
        $qh->setNode($U6);
        $qh->type = $U6->getAttribute("\124\x79\160\145");
        $tu = $qh->locateKey($U6);
        if ($tu) {
            goto Yd;
        }
        echo sprintf("\103\157\x75\x6c\144\40\x6e\x6f\x74\x20\154\x6f\143\141\x74\145\40\x6b\145\x79\40\141\x6c\147\157\x72\151\x74\x68\155\x20\x69\156\40\x65\x6e\143\162\x79\160\164\x65\x64\x20\x64\x61\164\x61\x2e");
        die;
        Yd:
        $ra = $qh->locateKeyInfo($tu);
        if ($ra) {
            goto Cq;
        }
        echo sprintf("\x43\157\165\x6c\x64\x20\156\x6f\164\40\154\157\143\x61\x74\145\x20\74\x64\x73\151\x67\72\113\x65\171\111\156\x66\157\x3e\40\x66\x6f\162\40\x74\150\145\40\145\156\143\162\171\x70\x74\145\144\x20\x6b\x65\x79\56");
        die;
        Cq:
        $Iu = $Bk->getAlgorith();
        if ($ra->isEncrypted) {
            goto Y_;
        }
        $wf = $tu->getAlgorith();
        if (!($Iu !== $wf)) {
            goto Nj;
        }
        echo sprintf("\101\154\147\157\x72\151\164\150\155\40\155\151\163\x6d\141\x74\143\x68\40\x62\x65\x74\167\x65\x65\x6e\x20\x69\x6e\160\x75\x74\40\x6b\145\x79\40\141\156\144\40\x6b\x65\x79\40\151\156\x20\x6d\145\163\163\x61\147\145\x2e\40" . "\x4b\145\171\40\167\141\163\x3a\x20" . var_export($Iu, TRUE) . "\73\x20\155\145\x73\163\141\147\x65\40\167\x61\163\x3a\x20" . var_export($wf, TRUE));
        die;
        Nj:
        $tu = $Bk;
        goto Ix;
        Y_:
        $bw = $ra->getAlgorith();
        if (!in_array($bw, $NH, TRUE)) {
            goto dL;
        }
        echo sprintf("\x41\x6c\x67\x6f\x72\151\x74\x68\x6d\x20\x64\151\163\x61\142\x6c\x65\144\x3a\40" . var_export($bw, TRUE));
        die;
        dL:
        if (!($bw === XMLSecurityKey::RSA_OAEP_MGF1P && $Iu === XMLSecurityKey::RSA_1_5)) {
            goto yZ;
        }
        $Iu = XMLSecurityKey::RSA_OAEP_MGF1P;
        yZ:
        if (!($Iu !== $bw)) {
            goto lu;
        }
        echo sprintf("\x41\x6c\147\157\x72\x69\164\150\x6d\x20\155\x69\x73\155\141\x74\143\150\x20\142\x65\x74\167\145\x65\x6e\x20\151\156\x70\165\x74\x20\153\x65\x79\40\x61\156\144\x20\x6b\x65\171\x20\165\x73\145\144\40\164\x6f\x20\x65\x6e\143\162\171\x70\164\x20" . "\x20\164\x68\x65\40\163\171\x6d\x6d\145\164\x72\x69\143\x20\x6b\145\171\x20\146\x6f\x72\40\164\150\x65\40\x6d\x65\x73\163\141\x67\x65\x2e\x20\113\x65\171\x20\x77\141\x73\x3a\x20" . var_export($Iu, TRUE) . "\73\40\x6d\x65\x73\163\x61\x67\x65\x20\x77\141\163\x3a\x20" . var_export($bw, TRUE));
        die;
        lu:
        $AT = $ra->encryptedCtx;
        $ra->key = $Bk->key;
        $jt = $tu->getSymmetricKeySize();
        if (!($jt === NULL)) {
            goto nB;
        }
        echo sprintf("\125\x6e\153\x6e\157\167\x6e\40\x6b\145\171\40\163\151\172\x65\40\146\157\162\x20\x65\x6e\143\162\171\160\164\x69\x6f\x6e\x20\x61\x6c\x67\157\x72\x69\164\150\155\72\40" . var_export($tu->type, TRUE));
        die;
        nB:
        try {
            $Yy = $AT->decryptKey($ra);
            if (!(strlen($Yy) != $jt)) {
                goto zg;
            }
            echo sprintf("\x55\x6e\x65\x78\x70\x65\143\x74\x65\144\x20\x6b\145\x79\40\x73\151\172\x65\40\x28" . strlen($Yy) * 8 . "\142\151\164\163\51\x20\x66\157\162\40\145\156\143\x72\x79\x70\x74\151\x6f\x6e\40\x61\154\147\x6f\x72\x69\x74\150\x6d\72\40" . var_export($tu->type, TRUE));
            die;
            zg:
        } catch (Exception $sK) {
            $C6 = $AT->getCipherValue();
            $g4 = openssl_pkey_get_details($ra->key);
            $g4 = sha1(serialize($g4), TRUE);
            $Yy = sha1($C6 . $g4, TRUE);
            if (strlen($Yy) > $jt) {
                goto M3;
            }
            if (strlen($Yy) < $jt) {
                goto Y2;
            }
            goto lE;
            M3:
            $Yy = substr($Yy, 0, $jt);
            goto lE;
            Y2:
            $Yy = str_pad($Yy, $jt);
            lE:
        }
        $tu->loadkey($Yy);
        Ix:
        $o5 = $tu->getAlgorith();
        if (!in_array($o5, $NH, TRUE)) {
            goto DQ;
        }
        echo sprintf("\101\154\x67\x6f\162\x69\x74\150\155\x20\144\x69\163\141\142\x6c\145\x64\72\40" . var_export($o5, TRUE));
        die;
        DQ:
        $op = $qh->decryptNode($tu, FALSE);
        $mD = "\x3c\x72\157\157\164\x20\170\155\154\156\x73\72\163\141\155\154\x3d\42\165\x72\156\72\157\141\x73\x69\163\72\156\x61\x6d\x65\x73\72\164\143\72\123\x41\x4d\114\x3a\62\56\60\72\x61\x73\x73\x65\x72\164\x69\x6f\156\42\x20" . "\x78\155\x6c\156\x73\72\170\x73\x69\x3d\42\x68\x74\164\x70\x3a\57\x2f\167\x77\x77\x2e\x77\63\56\x6f\x72\147\57\x32\x30\60\x31\57\x58\115\x4c\123\x63\150\x65\155\141\x2d\151\x6e\163\164\141\x6e\x63\145\x22\76" . $op . "\x3c\57\x72\x6f\157\164\76";
        $hF = new DOMDocument();
        if (@$hF->loadXML($mD)) {
            goto U1;
        }
        echo sprintf("\106\x61\x69\154\145\x64\x20\x74\x6f\x20\x70\x61\162\163\x65\x20\144\145\143\x72\x79\x70\164\145\x64\x20\x58\115\x4c\56\40\115\141\x79\142\x65\x20\164\x68\x65\40\167\162\x6f\156\x67\x20\x73\x68\141\162\145\144\x6b\x65\x79\x20\167\141\163\40\165\163\145\144\77");
        throw new Exception("\x46\141\x69\154\145\x64\40\164\157\40\160\141\x72\163\x65\40\144\145\x63\x72\x79\x70\x74\145\x64\40\130\x4d\114\56\x20\x4d\x61\x79\x62\x65\x20\x74\x68\145\x20\x77\162\x6f\156\x67\40\x73\x68\x61\162\x65\x64\153\145\x79\40\167\141\x73\40\x75\x73\x65\144\77");
        U1:
        $Yo = $hF->firstChild->firstChild;
        if (!($Yo === NULL)) {
            goto MX;
        }
        echo sprintf("\115\x69\x73\163\151\x6e\x67\x20\145\x6e\143\x72\x79\x70\164\145\144\x20\x65\x6c\145\x6d\145\x6e\164\56");
        throw new Exception("\x4d\151\x73\x73\151\156\147\x20\145\x6e\x63\x72\x79\x70\164\x65\x64\x20\x65\154\145\x6d\x65\x6e\164\56");
        MX:
        if ($Yo instanceof DOMElement) {
            goto c6;
        }
        echo sprintf("\x44\145\143\162\171\x70\164\x65\x64\40\145\x6c\145\x6d\145\x6e\164\x20\167\141\163\x20\156\x6f\164\x20\x61\143\164\x75\x61\x6c\154\171\40\x61\40\104\x4f\x4d\105\x6c\145\x6d\145\156\164\x2e");
        c6:
        return $Yo;
    }
    public static function decryptElement(DOMElement $U6, XMLSecurityKey $Bk, array $NH = array(), XMLSecurityKey $AU = NULL)
    {
        try {
            return self::doDecryptElement($U6, $Bk, $NH);
        } catch (Exception $sK) {
            try {
                return self::doDecryptElement($U6, $AU, $NH);
            } catch (Exception $uJ) {
            }
            echo sprintf("\x46\x61\x69\x6c\145\144\x20\x74\157\40\144\x65\x63\x72\171\160\164\40\130\115\x4c\40\x65\x6c\x65\x6d\x65\x6e\x74\x2e");
            die;
        }
    }
    public static function get_mapped_groups($Qp, $KR)
    {
        $tX = array();
        if (empty($KR)) {
            goto WV;
        }
        $JU = array();
        $r7 = 1;
        tO:
        if (!($r7 < 10)) {
            goto Uv;
        }
        $Kb = $Qp->get("\x67\162\x6f\x75\x70" . $r7 . "\137\x6d\141\160");
        $JU[$r7] = explode("\x3b", $Kb);
        $r7++;
        goto tO;
        Uv:
        WV:
        foreach ($KR as $Ad) {
            if (empty($Ad)) {
                goto Au;
            }
            $r7 = 0;
            $l0 = false;
            Rz:
            if (!($r7 < 9 && !$l0)) {
                goto pU;
            }
            if (!(!empty($JU[$r7]) && in_array($Ad, $JU[$r7], TRUE))) {
                goto XE;
            }
            $tX[] = $Qp->get("\x67\x72\x6f\x75\160" . $r7);
            $l0 = true;
            XE:
            $r7++;
            goto Rz;
            pU:
            Au:
            p4:
        }
        Yq:
        return array_unique($tX);
    }
    public static function getEncryptionAlgorithm($kb)
    {
        switch ($kb) {
            case "\150\164\x74\160\x3a\x2f\x2f\x77\167\x77\x2e\x77\63\x2e\x6f\x72\147\x2f\x32\x30\60\x31\57\60\x34\x2f\x78\x6d\x6c\145\156\x63\43\x74\x72\151\160\154\145\x64\145\163\x2d\x63\142\x63":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto hd;
            case "\150\164\164\160\x3a\x2f\57\x77\x77\x77\x2e\x77\63\56\x6f\162\147\x2f\x32\x30\60\61\57\60\x34\x2f\x78\155\x6c\x65\156\143\x23\141\x65\163\61\x32\70\x2d\143\142\143":
                return XMLSecurityKey::AES128_CBC;
            case "\x68\x74\164\x70\x3a\x2f\x2f\x77\167\167\56\x77\63\x2e\x6f\162\x67\x2f\62\60\x30\61\57\60\64\x2f\170\155\x6c\145\156\143\43\141\145\x73\x31\x39\62\55\x63\142\x63":
                return XMLSecurityKey::AES192_CBC;
                goto hd;
            case "\x68\x74\x74\160\72\x2f\x2f\x77\167\x77\56\167\63\56\x6f\x72\147\x2f\62\x30\x30\61\57\x30\x34\x2f\x78\155\x6c\145\x6e\x63\x23\x61\145\163\62\65\x36\x2d\x63\x62\143":
                return XMLSecurityKey::AES256_CBC;
                goto hd;
            case "\x68\x74\x74\160\72\x2f\x2f\167\167\x77\56\167\x33\x2e\157\162\147\x2f\x32\x30\60\61\57\x30\x34\57\170\155\x6c\x65\x6e\x63\43\x72\x73\x61\55\61\x5f\65":
                return XMLSecurityKey::RSA_1_5;
                goto hd;
            case "\x68\164\164\160\x3a\57\x2f\167\167\167\56\x77\x33\56\x6f\162\x67\57\x32\x30\x30\x31\x2f\x30\64\x2f\170\x6d\154\145\x6e\143\43\162\163\x61\x2d\x6f\x61\x65\160\55\155\147\146\x31\x70":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto hd;
            case "\150\x74\x74\160\72\57\57\x77\x77\167\x2e\167\63\56\157\x72\x67\57\62\x30\60\x30\57\x30\71\57\x78\x6d\x6c\144\163\151\x67\x23\x64\163\x61\x2d\163\x68\x61\x31":
                return XMLSecurityKey::DSA_SHA1;
                goto hd;
            case "\x68\x74\164\x70\72\57\57\x77\x77\167\56\x77\63\56\157\x72\x67\x2f\x32\x30\60\x30\57\x30\71\x2f\x78\155\x6c\x64\163\x69\x67\x23\162\x73\x61\x2d\163\150\x61\x31":
                return XMLSecurityKey::RSA_SHA1;
                goto hd;
            case "\150\x74\164\x70\72\57\x2f\x77\x77\167\56\167\63\x2e\157\162\147\57\x32\x30\60\61\x2f\60\x34\x2f\170\x6d\x6c\144\x73\151\x67\x2d\x6d\x6f\162\145\43\x72\163\141\x2d\163\150\141\x32\x35\66":
                return XMLSecurityKey::RSA_SHA256;
                goto hd;
            case "\x68\164\x74\x70\x3a\x2f\57\x77\167\x77\x2e\167\63\x2e\157\x72\147\x2f\62\x30\60\61\57\60\64\57\x78\155\154\x64\x73\151\x67\55\155\157\x72\x65\x23\162\163\141\x2d\163\x68\141\x33\x38\x34":
                return XMLSecurityKey::RSA_SHA384;
                goto hd;
            case "\x68\x74\164\160\x3a\x2f\x2f\x77\167\x77\x2e\167\63\56\x6f\162\147\x2f\x32\60\x30\61\x2f\60\x34\x2f\x78\155\154\144\x73\151\x67\x2d\x6d\x6f\162\145\43\162\163\141\x2d\163\x68\x61\65\61\62":
                return XMLSecurityKey::RSA_SHA512;
                goto hd;
            default:
                echo sprintf("\111\x6e\x76\141\154\151\x64\x20\105\156\143\x72\x79\160\x74\151\x6f\x6e\x20\x4d\145\x74\150\157\x64\x3a\x20" . $kb);
                die;
                goto hd;
        }
        CG:
        hd:
    }
    public static function insertSignature(XMLSecurityKey $Yy, array $FL, DOMElement $W1, DOMNode $Ja = NULL)
    {
        $Cx = new XMLSecurityDSig();
        $Cx->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($Yy->type) {
            case XMLSecurityKey::RSA_SHA256:
                $J1 = XMLSecurityDSig::SHA256;
                goto v6;
            case XMLSecurityKey::RSA_SHA384:
                $J1 = XMLSecurityDSig::SHA384;
                goto v6;
            case XMLSecurityKey::RSA_SHA512:
                $J1 = XMLSecurityDSig::SHA512;
                goto v6;
            default:
                $J1 = XMLSecurityDSig::SHA1;
        }
        Na:
        v6:
        $Cx->addReferenceList(array($W1), $J1, array("\x68\x74\164\x70\72\57\x2f\x77\x77\x77\x2e\x77\63\56\157\x72\x67\x2f\62\x30\x30\60\x2f\60\x39\57\170\155\x6c\x64\163\x69\x67\43\x65\x6e\x76\x65\154\x6f\x70\x65\144\x2d\163\x69\147\156\x61\x74\x75\162\145", XMLSecurityDSig::EXC_C14N), array("\x69\144\x5f\x6e\x61\x6d\x65" => "\111\104", "\157\x76\145\x72\167\x72\x69\x74\145" => FALSE));
        $Cx->sign($Yy);
        foreach ($FL as $NG) {
            $Cx->add509Cert($NG, TRUE);
            ql:
        }
        Uj:
        $Cx->insertSignature($W1, $Ja);
    }
    public static function signXML($mD, $kG, $R7, $MI = '')
    {
        $OM = array("\164\171\x70\145" => "\x70\162\x69\166\141\x74\145");
        $Yy = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $OM);
        $Yy->loadKey($R7, TRUE);
        $dN = file_get_contents($kG);
        $w3 = new DOMDocument();
        $w3->loadXML($mD);
        $k2 = $w3->firstChild;
        if (!empty($MI)) {
            goto fv;
        }
        self::insertSignature($Yy, array($dN), $k2);
        goto ae;
        fv:
        $O5 = $w3->getElementsByTagName($MI)->item(0);
        self::insertSignature($Yy, array($dN), $k2, $O5);
        ae:
        $hs = $k2->ownerDocument->saveXML($k2);
        $jx = base64_encode($hs);
        return $jx;
    }
    public static function postSAMLRequest($bX, $M1, $zQ)
    {
        echo "\74\150\x74\155\154\x3e\x3c\x68\145\x61\144\76\x3c\163\143\162\x69\x70\164\x20\163\162\x63\x3d\47\x68\x74\x74\x70\163\x3a\57\x2f\143\157\144\x65\x2e\152\161\165\x65\162\171\56\143\x6f\155\57\152\161\165\145\162\171\x2d\x31\56\61\x31\56\x33\x2e\155\151\x6e\x2e\x6a\163\47\76\74\x2f\163\143\162\x69\x70\164\76\x3c\163\x63\162\151\160\164\40\164\x79\x70\145\75\x22\x74\145\x78\x74\57\x6a\141\x76\x61\163\x63\x72\x69\x70\x74\42\x3e\44\x28\x66\165\156\143\x74\151\x6f\x6e\x28\51\x7b\144\157\x63\165\155\145\x6e\x74\56\x66\x6f\x72\155\x73\x5b\x27\163\x61\155\154\x2d\162\x65\x71\x75\x65\163\x74\x2d\x66\157\162\x6d\47\x5d\56\163\165\142\155\x69\164\x28\51\x3b\x7d\51\73\x3c\57\163\x63\162\151\160\x74\x3e\x3c\x2f\x68\x65\141\x64\x3e\x3c\142\157\x64\171\x3e\x50\154\x65\141\163\x65\x20\x77\x61\151\x74\56\56\56\74\x66\x6f\x72\x6d\40\141\x63\x74\x69\157\156\x3d\x22" . $bX . "\42\x20\x6d\x65\164\150\x6f\144\x3d\42\160\x6f\x73\x74\42\40\151\x64\75\x22\x73\x61\155\x6c\55\x72\x65\161\x75\145\163\164\55\x66\x6f\x72\155\42\76\74\x69\x6e\x70\165\164\x20\x74\171\x70\x65\75\x22\x68\x69\144\x64\145\x6e\x22\x20\156\x61\x6d\x65\75\x22\x53\x41\115\x4c\122\145\161\165\x65\163\x74\42\x20\x76\x61\x6c\x75\x65\x3d\42" . $M1 . "\x22\40\57\x3e\74\x69\156\x70\165\164\x20\x74\x79\160\145\75\x22\x68\x69\x64\x64\145\156\42\40\156\141\155\145\75\x22\122\145\154\141\171\123\164\141\164\145\42\x20\166\x61\x6c\165\145\75\42" . htmlentities($zQ) . "\42\x20\57\x3e\74\57\146\x6f\x72\x6d\x3e\74\57\x62\157\x64\x79\76\x3c\x2f\x68\x74\155\154\x3e";
        die;
    }
    public static function postSAMLResponse($bX, $ik, $zQ)
    {
        echo "\74\x68\164\x6d\154\76\x3c\x68\x65\x61\x64\76\x3c\163\x63\162\x69\x70\164\40\163\x72\x63\75\47\150\164\x74\x70\163\x3a\57\x2f\143\157\144\145\56\x6a\x71\165\145\162\x79\56\143\x6f\x6d\x2f\152\x71\165\x65\x72\x79\x2d\61\56\x31\x31\x2e\x33\56\x6d\x69\156\56\x6a\163\47\76\74\57\x73\143\162\x69\x70\164\x3e\x3c\163\143\162\x69\x70\164\x20\x74\x79\160\x65\75\x22\x74\145\170\x74\57\x6a\141\166\x61\x73\x63\x72\151\x70\x74\42\x3e\x24\50\x66\165\156\x63\164\151\157\156\x28\51\x7b\144\x6f\143\165\x6d\x65\156\x74\x2e\x66\x6f\162\x6d\163\x5b\x27\x73\141\155\154\55\x72\x65\x71\x75\x65\163\x74\55\146\157\x72\155\x27\x5d\56\x73\165\x62\155\151\x74\x28\x29\x3b\x7d\51\73\74\x2f\163\x63\x72\x69\160\x74\x3e\74\x2f\150\145\141\144\x3e\74\x62\x6f\x64\x79\x3e\x50\154\145\141\163\145\x20\167\x61\x69\x74\x2e\x2e\x2e\x3c\146\x6f\162\155\40\x61\143\x74\x69\x6f\156\x3d\42" . $bX . "\42\x20\155\x65\164\150\x6f\144\75\x22\x70\157\x73\164\x22\x20\x69\144\75\x22\163\x61\x6d\x6c\55\162\x65\161\x75\145\x73\x74\x2d\x66\157\162\x6d\x22\x3e\x3c\x69\x6e\x70\165\x74\40\164\171\x70\145\x3d\x22\150\x69\144\144\145\156\x22\40\x6e\x61\x6d\145\75\x22\x53\101\115\x4c\122\x65\x73\160\x6f\x6e\163\x65\42\x20\x76\x61\x6c\x75\x65\x3d\x22" . $ik . "\42\x20\57\76\74\x69\156\160\x75\164\x20\164\171\x70\x65\x3d\42\x68\x69\x64\144\145\156\42\x20\156\141\x6d\145\x3d\x22\x52\145\x6c\x61\171\123\164\x61\x74\145\x22\40\x76\x61\x6c\165\x65\x3d\42" . htmlentities($zQ) . "\42\x20\x2f\x3e\x3c\x2f\x66\157\x72\155\x3e\74\x2f\x62\157\x64\x79\76\x3c\57\x68\x74\155\x6c\76";
        die;
    }
    public static function sanitize_certificate($NG)
    {
        $NG = trim($NG);
        $NG = preg_replace("\x2f\x5b\15\12\x5d\x2b\57", '', $NG);
        $NG = str_replace("\x2d", '', $NG);
        $NG = str_replace("\102\105\x47\x49\x4e\40\103\105\122\x54\111\x46\x49\x43\101\124\105", '', $NG);
        $NG = str_replace("\x45\116\x44\x20\103\x45\122\124\x49\x46\x49\103\x41\x54\105", '', $NG);
        $NG = str_replace("\40", '', $NG);
        $NG = chunk_split($NG, 64, "\15\12");
        $NG = "\55\55\55\55\55\x42\105\107\111\x4e\x20\103\x45\122\124\111\x46\x49\103\x41\x54\105\55\x2d\x2d\55\55\xd\12" . $NG . "\55\x2d\x2d\55\55\105\116\104\40\103\x45\x52\124\x49\x46\111\103\101\124\105\x2d\x2d\x2d\55\x2d";
        return $NG;
    }
    public static function desanitize_certificate($NG)
    {
        $NG = preg_replace("\57\133\xd\12\135\53\57", '', $NG);
        $NG = str_replace("\55\55\x2d\55\x2d\x42\x45\x47\x49\x4e\x20\x43\x45\x52\x54\111\106\x49\103\101\124\x45\55\x2d\55\x2d\55", '', $NG);
        $NG = str_replace("\55\55\x2d\x2d\55\105\x4e\104\40\x43\105\122\x54\x49\106\111\x43\101\124\105\55\55\x2d\x2d\x2d", '', $NG);
        $NG = str_replace("\x20", '', $NG);
        return $NG;
    }
}
?>
